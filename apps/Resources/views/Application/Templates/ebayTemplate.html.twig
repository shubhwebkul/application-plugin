<script type="text/template" id="app-splash-template">
	<div class="uv-app-splash" style="text-align: center;">
		<img class="uv-app-splash-image" src='{{ asset("bundles/uvdeskcore/images/apps/ecommerce-splash-ebay.png") }}' alt="{{ application.name }}">
			<h2 class="uv-margin-top-10">{{ 'Setup EBay'|trans }}</h2>
		<p>{{ "Integrate EBay with UVdesk to connect with buyers on EBay."|trans }}</p>
		<a class="uv-btn add-app-channel">{{ 'Setup'|trans }}</a>
	</div>
</script>

<script type="text/template" id="channel-setting-template">
	<div class="uv-app-add-channel">
		<!-- Overview -->
		<div class="uv-instructions-block" style="">
			{% if application.instruction is defined %}
				<h3><span class="uv-icon-info uv-margin-right-5"></span>{{ "EBay Message Integration:"|trans }}</h3>
				<p style="margin: 10px 0px 0px;">{{ 'Select the type of platform messages that you would like to be converted into tickets:'|trans }}</p>
				<ul style="padding: 0px 0px 10px 20px; margin: 0px;">
					<li>{{ "Order Feedbacks: Generate tickets for order feedbacks you receive from buyers of your products"|trans|raw }}</li>
					<li>{{ "Ask Seller Questions: Generate tickets for queries you receive from buyers regarding your products"|trans|raw }}</li>
				</ul>

				<p style="margin: 0px 0px 10px;">{{ 'Once you have selected your preference for platform notifications, save your settings by clicking on "SAVE MESSAGE SETTINGS" to start receiving updates for such platform messages.'|trans }}</p>
				<p style="margin: 0px 0px 10px;">{{ 'To manually process any recent messages you may have received, refresh your messages by clicking on "REFRESH MESSAGES" to process your recent platform messages into tickets.'|trans }}</p>

				<p><b>{{ "Note:"|trans }}</b></p>
				<ul style="padding: 0px 0px 10px 20px; margin: 0px; font-style: italic;">
					<li>{{ "For platform message updates, only recent messages that you receive after updating your channel settings will be processed into tickets."|trans }}</li>
					<li>{{ "Manually processing your platform messages may take upto a few minutes so it's suggested that you don't reload the page during this process."|trans }}</li>
				</ul>
			{% endif %}
		</div>
		<!-- //Overview -->

		<h2>{{ 'Refresh EBay Messages'|trans }}</h2>
		<p class="uv-field-info">{{ 'Retreive recent messages from your EBay Seller Account and process them into tickets.'|trans }}</p>
		<div class="uv-element-block">
			<a href="#" class="uv-btn-small api-handle" data-handle="refresh-messages" <% print('data-ref="' + id + '"') %> >{{ "Refresh Messages"|trans }}</a>
		</div>

		<div class="uv-hr"></div>

		<!-- Form -->
		<form class="uv-app-add-form" method="POST">
			<h2>{{ 'EBay Message Conversion Settings'|trans }}</h2>
			<p class="uv-field-info">{{ 'Configure the type of messages that you would like to be processed into tickets. Tickets for these messages will automatically be processed as they are generated on eBay.'|trans }}</p>

			<div class="uv-element-block">
				<div class="uv-element-block">
					<label>
						<div class="uv-checkbox">
							<input type="checkbox" name="optedSubscription[]" value="od_feeds" <% if ('undefined' != typeof(settings.order_feedbacks) && settings.order_feedbacks) print('checked') %> >
							<span class="uv-checkbox-view"></span>
						</div>
						<span class="uv-checkbox-label">{{ 'EBay Buyer Feedbacks'|trans }}</span>
					</label>
				</div>
			</div>
			{# <div class="uv-element-block">
				<div class="uv-element-block">
					<label>
						<div class="uv-checkbox">
							<input type="checkbox" name="optedSubscription[]" value="m2m_messages" <% if ('undefined' != typeof(settings.member_messages) && settings.member_messages) print('checked') %> >
							<span class="uv-checkbox-view"></span>
						</div>
						<span class="uv-checkbox-label">{{ 'EBay Member Messages'|trans }}</span>
					</label>
				</div>
			</div> #}
			<div class="uv-element-block">
				<div class="uv-element-block">
					<label>
						<div class="uv-checkbox">
							<input type="checkbox" name="optedSubscription[]" value="seller_iListQuestions" <% if ('undefined' != typeof(settings.listing_questions) && settings.listing_questions) print('checked') %> >
							<span class="uv-checkbox-view"></span>
						</div>
						<span class="uv-checkbox-label">{{ 'EBay Ask Seller Questions'|trans }}</span>
					</label>
				</div>
			</div>
			<div class="uv-element-block">
				<div class="uv-element-block">
					<label>
						<div class="uv-checkbox">
							<input type="checkbox" name="optedSubscription[]" value="seller_orderCancellation" <% if ('undefined' != typeof(settings.order_cancellation) && settings.order_cancellation) print('checked') %> >
							<span class="uv-checkbox-view"></span>
						</div>
						<span class="uv-checkbox-label">{{ 'EBay Order Cancellation'|trans }}</span>
					</label>
				</div>
			</div>
			<div class="uv-action-buttons">
				<input type="submit" class="uv-btn-small" id="save-channel-settings" value="{{ 'Save Messege Settings'|trans }}">
			</div>
		</form>
		<!-- //Form -->
	</div>
</script>

<script type="text/template" id="channel-form-template">
	<div class="uv-app-add-channel">
		<!-- Instructions -->
		<div class="uv-instructions-block" style="">
			{% if application.instruction is defined %}
				<h3><span class="uv-icon-info uv-margin-right-5"></span>{{ 'Configuring your application:'|trans }}</h3>
				{{ application.instruction|raw }}
			{% endif %}
		</div>
		<!-- //Instructions -->

		<!-- Form -->
		<form class="uv-app-add-form" method="POST">
			<h1><% if ('undefined' == typeof(id)) { %>{{ 'Add Channel'|trans }}<% } else { %>{{ 'Update Channel'|trans }}<% } %></h1>

			<div class="uv-element-block">
				<label class="uv-field-label">{{ 'Name'|trans }}</label>
				<div class="uv-field-block">
					<input name="title" class="uv-field" type="text" placeholder="{{ 'Channel Name'|trans }}" value="<% if('undefined' != typeof(title)) print(title); %>">
				</div>
				<span class="uv-field-info">{{ 'It will be shown in the list of added channels for recognization purpose only'|trans }}</span>
			</div>

			<% details = ('undefined' != typeof(details) ) ? ('object' != typeof(details) ? JSON.parse(details) : details ) : {} %>

			{% if formFields is defined %}
				{% for field in formFields %}
					<div class="uv-element-block">
						<label class="uv-field-label">{{ field.label }}</label>
						<div class="uv-field-block">
							{% if field.type in ['text', 'password'] %}
								<input name="{{ field.name }}" class="uv-field" type="{{ field.type }}" placeholder="{{ field.placeholder is defined  ? field.placeholder : null }} " value="<% if('undefined' != typeof(details['{{ field.name }}'])) print(details['{{ field.name }}']); %>">
							{% elseif field.type == 'select'  %}
								<select class="uv-select" name="{{ field.name }}">
									{% if field.options is defined %}
										{% for option, optionValue in field.options %}
											<option value="{{ option }}" <% if('undefined' != typeof(details['{{ field.name }}']) && details['{{ field.name }}'] == {{ option }}) print('selected'); %> >{{ optionValue }}</option>
										{% endfor %}
									{% endif %}
								</select>
							{% endif %}
						</div>
						<span class="uv-field-info">{{ field.info }}</span>
					</div>
				{% endfor %}
			{% endif %}

			<div class="uv-action-buttons">
				<input type="submit" class="uv-btn" id="save-channel" value="<% if ('undefined' == typeof(id)) { %>{{ 'Add Channel'|trans }}<% } else { %>{{ 'Update Channel'|trans }}<% } %>">
			</div>
		</form>
		<!-- //Form -->
	</div>
</script>

<script type="text/javascript">
	var ChannelSettingView = Backbone.View.extend({
		el: $('#configure > .uv-app-screen'),
		channelSettingTemplate: _.template($('#channel-setting-template').html()),
		events: {
			'click #save-channel-settings': 'submitForm',
		},
		render: function() {
			Backbone.Validation.bind(this);
			$('.uv-app-add-channel').remove();
			$('.uv-app-splash').hide();
			$('.uv-app-list-channels').hide();
			var currentTemplate, modelJson;
			$(this.el).append(currentTemplate = this.channelSettingTemplate(modelJson = this.model.toJSON()));
			this.activateTabs();
			if(typeof(this.AddChecked) == 'function') {
				this.AddChecked();
			}
		},
		activateTabs: function() {
			$('.uv-box-tab ul li a').on('click', function(e){
				e.preventDefault();
				$('.uv-box-tab ul li a').removeClass('uv-box-tab-active');
				$(this).addClass('uv-box-tab-active')

				$('.uv-tab-view .uv-tab-view').removeClass('uv-tab-view-active');
				$('#'+$(this).attr('data-href')).addClass('uv-tab-view-active')
			});
		},
		submitForm: function(e) {
			e.preventDefault();

			form = $(e.target).closest('form');
			// this.model.set('setting', form.serializeObject());
			$(e.target).attr('disabled', 'disabled');
			url = "{{ path('app_save_application_settings', {'applicationRouteName': app.request.get('applicationRouteName') }) }}";
			if (this.model.id) {
				url += '/' + this.model.id;
			}
			form.attr("action", url);
			form.submit();
		},
	});

	var EBayView = Backbone.View.extend({
		el : $('.uv-wrapper'),
		events : {
			'click .api-handle' : "handleAPIRequest",
		},
		handleAPIRequest: function(e) {
			e.preventDefault();
			var targetHandle = $(e.currentTarget).data('handle');
			var targetReference = $(e.currentTarget).data('ref');
			var handleUrl = "{{ url('app_application_medium', {'applicationRouteName': 'ebay', 'apiEndpoint': 'placeholder' }) }}";

			if (targetHandle) {
				app.appView.showLoader();
				var targetHandleUrl = handleUrl.replace('placeholder', targetHandle);

				switch (targetHandle) {
					case 'refresh-messages':
						$.ajax({
							url: targetHandleUrl,
							method: 'POST',
							data: {referenceId: targetReference},
							success: function(response) {
								app.appView.hideLoader();
								app.appView.renderResponseAlert(response);
							},
							error: function(response) {
								app.appView.hideLoader();
								try {
									response = $.parseJSON(response.responseText);
									app.appView.renderResponseAlert(response);
								} catch (e) {
									app.appView.renderResponseAlert({
										alertClass: 'danger',
										alertMessage: "{{ 'An unexpected error occurred while processing your request. Please try again later.'|trans }}"
									});
								}
							}
						});
						break;
					default:
						app.appView.hideLoader();
						app.appView.renderResponseAlert({
							alertClass: 'danger',
							alertMessage: 'An unexpected error occurred while processing your request. Please try again later.',
						});
						break;
				}
			}
		},
	});

	var ebayView = new EBayView();
</script>
